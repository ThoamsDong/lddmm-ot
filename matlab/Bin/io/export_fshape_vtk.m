function [] = export_fshape_vtk(data,fname,signal_name,signal_type)
% EXPORT_VTK(data,fname,funname) save a fshape structure into a .vtk file
%
%Input
%   data : struct with fields 'x','G' and 'f'. (the field 'f' may be optional)
%   fname : name of the output file
%   signal_name (optional) : name of the functional to be set in the.vtk file
%   type_signal : set to 'face' if the signal is defined at the center of
%       the face. In that case size(data.f,1) == size(data.G,1). Otherwise
%       the signal is assumed to be defined at each vertex.
% Author : B. Charlier (2017)


if nargin == 2 || isempty(signal_name)
    signal_name = 'signal';
end
if nargin <= 3
    if size(data.f,1) == size(data.x,1)
        signal_type = 'vertex';
    elseif size(data.f,1) == size(data.G,1)
        signal_type = 'face';
    end
end

if size(data.x,2)<=2
    data.x = [data.x,zeros(size(data.x,1),3-size(data.x,2))];
end



% open file
fid = fopen(fname,'w');

% header
fprintf(fid,'# vtk DataFile Version 3.0\n');
fprintf(fid,'vtk generated by fshapesTk\n');

fprintf(fid,'%s\n','ASCII');
fprintf(fid,'DATASET POLYDATA\n');

%points
fprintf(fid,'POINTS %u float\n', size(data.x,1));

x = repmat('%G ',1,size(data.x,2)-1);
fprintf(fid,[x,'%G\n'], data.x');



%edges
if size(data.G,2) == 3
    type = 'POLYGONS';
elseif size(data.G,2) == 2
    type = 'LINES';
elseif size(data.G,2) == 1
    type = 'VERTICES';
elseif size(data.G,2) == 4
    type = 'POLYGONS';
end
fprintf(fid,['\n%s %u %u\n'], type,size(data.G,1),(size(data.G,2)+1).*size(data.G,1));

x = [num2str(size(data.G,2)),' ',repmat('%u ',1,size(data.G,2)-1)];
fprintf(fid,[x,'%u\n'], (data.G-1)');


% functional
if isfield(data,'f')
    if strcmpi(signal_type,'face')
        fprintf(fid,['\nCELL_DATA ','%u\n'],size(data.G,1)); % 5== triangle, 1 == vertex, 3 == lines,
    else
        fprintf(fid,['\nPOINT_DATA ','%u\n'],size(data.x,1)); % 5== triangle, 1 == vertex, 3 == lines,
        
    end
    
    fprintf(fid,['SCALARS ',signal_name,' FLOAT\nLOOKUP_TABLE default\n']);
    fprintf(fid,['%G\n'],data.f');
    
end
fclose(fid);

%avoid unnecessary output
if ~strcmpi(fname(end-17:end),'results_iter_c.vtk')
	fprintf('File saved in %s\n',fname)
end

end
